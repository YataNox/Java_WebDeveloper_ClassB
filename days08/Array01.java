package days08;

public class Array01 
{
	public static void main(String args[])
	{
		// 배열
		// 동일한 변수 이름에 번호(첨자)를 붙여서 다수개의 데이터를 한 번에 저장
		// 할 수 있는 방법
		// 1. 다수개의 변수를 같은 이름으로 손쉽게 선언하여 사용 가능
		// 2. 하나의 이름으로 다수개의 변수들을 제어할 수 있음
		
		// 배열의 생성 방법
		// 자료형 [] 배열 변수명
		int [] arr;
		// 현재는 배열에 정수를 몇 개 저장할 수 있는지 갯수가 정해지지 않았습니다.
		// 갯수는 반드시 정해놓고 사용합니다. 갯수 정하지 않고 사용하지 않습니다.
		
		// 위의 내용 중 변수 a는 저장될 정수들의 공간이 아니라, 정수들은 별도의 공간에
		// 저장하고 그 시작 주소를 저장한 레퍼런스(참조) 변수 입니다.
		
		arr = new int[3];
		// new : HEAP 영역에 새로운 공간을 확보하라는 명령 - 정수 3개가 저장될 공간
		// new 연산자 : 동적인 메모리를 생성하는 연산자
		// 프로그램의 구동중에 HEAP 메모리에 공간을 생성하는 연산자로 생성된
		// 메모리의 참조(주소)값을 반환 전달합니다.
		// 위의 코드는 HEAP 메모리에 12Byte(정수 3개) 공간을 생성하고, 해당 위치값을
		// arr 배열 참조변수에 대입합니다.
		
		// 둘을 합쳐서
		int [] b = new int[3];
		// 으로 선언하기도 합니다.
		
		// 배열의 각 공간에 값을 대입하는 방법
		// 인덱스(첨자) 연산을 사용
		// 배열의 인덱스(첨자) : 시작은 0, 종료는 배열의 크기 - 1
		// 배열 변수명[인덱스(첨자)] = 값;
		arr[0] = 10; //배열의 1번째 요소에 값을 대입
		arr[1] = 20; //배열의 2번째 요소에 값을 대입
		arr[2] = 30; //배열의 3번째 요소에 값을 대입
		
		int i = 0;
		b[i] = 30;
		i = 1;
		b[i] = 40;
		b[i+1] = 50;
		
		System.out.printf("arr[0] = %d\n", arr[0]);
		System.out.printf("arr[1] = %d\n", arr[1]);
		System.out.printf("arr[2] = %d\n", arr[2]);
		System.out.printf("b[0] = %d\n", b[0]);
		System.out.printf("b[1] = %d\n", b[1]);
		System.out.printf("b[2] = %d\n", b[2]);
	}
}
